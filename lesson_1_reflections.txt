How did viewing a diff between two versions of a file help you see the bug that was introduced?

Being able to compare code line by line was helpful for noticing differences.
Otherwise you are just searching for a letter in a haystack...

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

This can become a uesful tool becuase, if at point A in time you have a working version, and then you make many changes
without saving in between until point B, you may not have a working program and want to switch back to find 
where you made a mistake.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git,
vs having versions automatically saved, like Google Docs does?

I think the Pros are controlling when a good time to save a commit is, the cons are saving in the middle 
of unfinsihed work. 

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others,
like Google Docs, treat each file separately?

It is better to have each file saved at each commit becuase I would imagine you would want to know the state of 
each file at each given commit for a repository

How can you use the commands git log and git diff to view the history of files?

Git log shows a listing of all of your old files, git diff compares the files within your log so you can 
see the changs from one version to another

How might using version control make you more confident to make changes that could break something?

You have the ability to go back to a perfect working state without any issues. You can break all you want and put it back together again

Now that you have your workspace set up, what do you want to try using Git for?

I want to see what the value of using git is, comparing different projects at different points in time.



Commands --

git diff will do this. It takes two arguments - the two commit ids to compare

git clone will do this. It takes one argument - the url of the repository to copy. 

git checkout will do this. It takes one argument - the commit ID to restore.

git log will do this. It doesn't take any arguments.

